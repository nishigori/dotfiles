let g:local_config = {
  \ 'dotfiles_dir'        : $HOME . '/dotfiles',
  \ 'tmp_dir'             : $HOME . '/.vim/tmp',
  \ 'weekly_buffer_dir'   : $HOME . '/.vim/tmp/.gtd',
  \ 'ref_phpmanual_path'  : $HOME . '/.vim/ref/php',
  \ 'ref_jquery_path'     : $HOME . '/.vim/ref/jqapi-latest',
  \ 'phpunit_dir'         : 'ctags_dir',
  \ }

" Not use white space into the statement (Suck!!)
set directory=~/.vim/tmp/swap,/tmp,.
set backupdir=~/.vim/tmp/backup,/tmp,.
set viewdir=~/.vim/tmp/view,/tmp,.
if has('persistent_undo')
  set undodir=~/.vim/tmp/undo
endif

" colorscheme
let g:colors_name = 'hybrid'
set background=dark

" If g:use_plugin is 0, no load vimrc block code depends plugin
let g:use_plugin = 0

let s:ramdisk_dir       = '/tmp/ramdisk'
let s:alias_ramdisk_dir = $HOME . '/.vim/tmp/ramdisk'

" lint
let g:ruby_bin = '/usr/local/bin/ruby'

" neobundle {{{
" FIXME: neobundle is no support `http` protocol
"g:neobundle_default_git_protocol = 'http'
" }}}
" unite.vim {{{
let s:unite_date_directory_suffix = 'unite'
let g:local_unite_data_directory =
  \ s:ramdisk_dir .'/'. s:unite_date_directory_suffix
let g:unite_source_alias_aliases = {
  \   'file_user_src': {
  \     'source': 'file',
  \     'args': '/usr/local/src',
  \   },
  \ }
nnoremap <silent> [unite]U :<C-u>Unite file_user_src
  \ -buffer-name=files buffer bookmark file<CR>
" }}}
" unite-sf2 {{{
"let g:unite_source_sf2_root_dir = ''
let g:unite_source_sf2_bundles = {}
" }}}
" neocomplcache {{{
let s:neocomplcache_temporary_dir_suffix = 'neocom'
let g:local_neocomplcache_temporary_dir =
  \ s:ramdisk_dir .'/'. s:neocomplcache_temporary_dir_suffix
" }}}
" TwitVim {{{
let twitvim_browser_cmd = 'firefox'
let twitvim_count       = 120
let twitvim_login_b64   = ''
let twitvim_bitly_user  = ''
let twitvim_bitly_key   = ''
" }}}
" bitly.vim {{{
let g:bitly_login   = ''
let g:bitly_api_key = ''
" }}}
" github {{{
let g:github_user  = ''
let g:github_token = ''
" }}}
" Calendar.vim {{{
let g:calendar_diary = $HOME.'/tmp/diary'
" }}}
" dbext.vim {{{
let g:dbext_default_profile      = ""
let g:dbext_default_type         = "MYSQL"
let g:dbext_default_user         = "user"
let g:dbext_default_passwd       = "password"
let g:dbext_default_dbname       = "dbname"
let g:dbext_default_host         = "localhost"
let g:dbext_default_buffer_lines = 20

"let g:dbext_default_profile = 'mysql_local'
"let g:dbext_default_profile_mysql_local = ''
"let g:dbext_default_profile_mysql_local_DBI =
  "\ 'type=DBI:user=root:passwd=password=mysql:conn_parms=database=test;host=localhost'
"let g:dbext_default_profile_mysql_local_ODBC =
  "\ 'type=ODBC:user=root:passwd=password=mysql'

" vdbi {{{
" INFO: Install depends CPAM Modules
"
" Mac OS.)
"
"   $ sudo perl -MCPAN -e shell
"   cpan> install DBI
"   cpan> install DBD::mysql
"
" }}}
" }}}
" vim-symfony {{{
let g:symfony_app_console_path = $HOME.'/workspace/symfony/app/console'
" }}}
" php-cs-fixer {{{
let g:php_cs_fixer_path = "~/tmp/lib/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar
" }}}
" ftplugin/php.vim {{{
let g:php_version = 5.4
" }}}

" Startup Hook {{{1
" mount ramdisk_dir "{{{2
" INFO: auto mount for CentOS
" $ tmpfs {s:ramdisk_dir} tmpfs defaults 0 0
if 0 == isdirectory(s:ramdisk_dir)
  " for CentOS)
  "   $ mount -t tmpfs -o size=4g /dev/shm /mnt/ramdisk
  call vimproc#system('mount -t tmpfs none ' . s:ramdisk_dir)
endif "}}}2
call s:check_require_dirs([
  \ s:alias_ramdisk_dir,
  \ s:alias_ramdisk_dir .'/'. s:neocomplcache_temporary_dir_suffix,
  \ s:alias_ramdisk_dir .'/'. s:unite_date_directory_suffix,
  \ ])
function! s:check_require_dirs(dirs) "{{{2
  for dir in a:dirs
    if 0 == isdirectory(dir)
      mkdir(dir)
    endif
  endfor
endfunction "}}}2
" unite.vim {{{2
call vimproc#system(
  \ 'cp -a -R '
  \ .' '. s:alias_ramdisk_dir .'/'. s:unite_date_directory_suffix
  \ . g:local_unite_data_directory
  \ ) " }}}2
" neocomplcache {{{2
call vimproc#system(
  \ 'cp -a -R '
  \ .' '. s:alias_ramdisk_dir .'/'. s:neocomplcache_temporary_dir_suffix
  \ . g:local_neocomplcache_temporary_dir
  \ ) " }}}2
" }}}1
augroup HookVimLeave "{{{
  autocmd!
  autocmd VimLeavePre * call s:copy_ramdisk()
  function! s:copy_ramdisk()
    
  endfunction
augroup END "}}}

" vim:set fdm=marker ts=2 sw=2 sts=0 expandtab filetype=vim:
